#:::: {{ project_name }} Unit Test Makefile
#::::::::::::::::::::::::::::::::::::::::::
#
#


#:::: Project Firmware Root Directory
#::::::::::::::::::::::::::::::::::::
ROOT = ../..


#:::: Source Files
#:::::::::::::::::
SRCS += main.cc
SRCS += example.cc


#:::: Include Directories
#::::::::::::::::::::::::
INCLUDES += -I$(ROOT)/src
INCLUDES += -I$(ROOT)/vendor


#:::: Linked Libraries
#:::::::::::::::::::::
LIBS += -lm
LIBS += -lc
LIBS += -lstdc++


#:::: Output
#:::::::::::
BUILD = build
BIN   = unittest


.PHONY: all clean test


#:::: Compiler Tools
#:::::::::::::::::::
CC  = gcc
CXX = gcc


#:::: Common Compiler Options
#::::::::::::::::::::::::::::
CMFLAGS += -Wall			# enables nearly all warnings.
CMFLAGS += -Wextra			# enables extra warnings.


#:::: Preprocessor Options
#:::::::::::::::::::::::::
CPPFLAGS += -MMD			# Make dependency rule generation; creates a dependency list of outputs.
CPPFLAGS += -MP				# create phony Make targets for each generated dependency (to avoid some Make warnings).


# aggregate common compiler flags
COMPILER_FLAGS = $(strip $(CMFLAGS) $(CPPFLAGS) $(INCLUDES))


#:::: C Compiler Options
#:::::::::::::::::::::::
CFLAGS += --std=gnu11			# use GNU 11 C standard.
CFLAGS += $(COMPILER_FLAGS)


#:::: C++ Compiler Options
#:::::::::::::::::::::::::
CXXFLAGS += --std=c++17			# use C++ 17 standard.
CXXFLAGS += $(COMPILER_FLAGS)


# aggregate all object names.
OBJS = $(SRCS:%=$(BUILD)/%.o)



#:::: Targets
#::::::::::::


#:::: Build and test
all: directory test

#:::: Run unit tests
test: $(BUILD)/$(BIN)
	$(BUILD)/$(BIN)

#:::: Link objects to create binary
$(BUILD)/$(BIN): $(OBJS)
	@echo Linking $@
	@$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $@

#:::: Compile C++ sources
$(BUILD)/%.cc.o: %.cc
	@echo Compiling $@
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -c $< -o $@

#:::: Compile C sources
$(BUILD)/%.c.o: %.c
	@echo Compiling $@
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

#:::: Compile ASM sources
$(BUILD)/%.s.o: %.s
	@echo Compiling $@
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

#:::: make build directory
directory:
	@mkdir -p $(BUILD)


clean:
	@-rm -rf $(BUILD)


#:::: Include Generated Makefiles
#::::::::::::::::::::::::::::::::
#
# These are generated by the compiler preprocessor (via -Mx flags).
# Including these is important because it allows for source files
# to be recompiled incrementally if a header which it depends on
# has changed.
-include $(OBJS:.o=.d)
